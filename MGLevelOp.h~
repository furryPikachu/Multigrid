#ifndef MGLEVELOP
#define MGLEVELOP

class MGLevelOp
{
public:
  virtual std::vector<Real> Smooth(  std::vector<Real> &_fvalue,
                                     std::vector<Real> &initilal,
                                     Real x=0.0, Real y=0.0) const =0;
  virtual std::vector<Real> zeroSmooth(  std::vector<Real> &_fvalue,
                                         Real x, Real y ) const =0;
   
};

class GuessSeidel : public MGLevelOp
{
public:
    std::vector<Real> Smooth(  std::vector<Real> &_fvalue,
                               std::vector<Real> &initial,
                               Real x, Real y) const
                           
  {
    
    // std::cout<< _fvalue.size()<< " ";
    // std::cout<< initial.size()<<std::endl;
    assert(_fvalue.size() == initial.size());
    std::vector<Real> result;
    int n = initial.size();
    Real h = 1.0/(n+1);
    //initial[0]=0.5*(initial[1]+_fvalue[0]*h*h+x);
    result.push_back(0.5*(initial[1]+_fvalue[0]*h*h+x));
    for(int i=1; i< n-1; i++)
      // initial[i]=(0.5*initial[i-1]+0.5*initial[i+1]+0.5*h*h*_fvalue[i]);
      result.push_back((0.5*(initial[i-1]+initial[i+1]+h*h*_fvalue[i])));
    result.push_back(0.5*(initial[n-2]+_fvalue[n-1]*h*h+y));
    assert(initial.size()== _fvalue.size());
    return result; 
  }

  std::vector<Real> zeroSmooth(  std::vector<Real> &_fvalue,
                                 Real x, Real y ) const
     {
    int n = _fvalue.size();
    Real h = 1.0/(n+1);
    std::vector<Real> initial(n,0.0);
    initial[0]=0.5*(initial[1]+h*h*_fvalue[0]+x);
    for(int i=1; i< n-1; i++)
      initial[i]=0.5*(initial[i-1]+initial[i+1]+h*h*_fvalue[i]);
    initial[n-1]=0.5*(initial[n-2]+_fvalue[n-1]*h*h+y);
    assert(initial.size()== _fvalue.size());
    return initial; 
  }
};

class Bottom
{
public:

  virtual std::vector<Real> BottomSolver(int n,
                                         const std::vector<Real> &_fvalue,
                                         Real x, Real y) const = 0;
   
};
class BottomDirect : public Bottom
{
public:
  std::vector<Real> BottomSolver(int n,
                                 const std::vector<Real> &_fvalue,
                                 Real x, Real y) const
  {
    assert(n == 3);
    Real h = 1.0/(n+1);
    std::vector<Real> result= _fvalue;
    assert(result.size() == n);
    result[2]=-0.5*(result[0]+2*result[1]+3*result[2])*h*h-0.5*x-1.5*y;
    result[1]=-_fvalue[2]*h*h-y;
    result[0]=-0.5*(-_fvalue[0]+_fvalue[2])*h*h+0.5*(x-y);
    assert(result.size() == n);
  return result;
  }
};


class Residual
{
public:
  virtual std::vector<Real> residualGen(  std::vector<Real> &fvalue,
                                          std::vector<Real> &value,
                                          Real x, Real y) const =0;  
};

class Resi : public Residual
{
public:
  std::vector<Real> residualGen(  std::vector<Real> &fvalue,
                                  std::vector<Real> &value,
                                  Real x, Real y) const
  {
    assert( fvalue.size() == value.size());
       
    int n = fvalue.size();
    Real h= 1.0/(n+1);
    std::vector<Real> result;
    result.push_back( (2*value[0]-value[1]-x)/(h*h) );
    for(int i=1; i<n-1; i++)
      result.push_back( (2*value[i]-value[i-1]-value[i+1])/(h*h) );
    result.push_back( (2*value[n-1]-value[n-2]-y)/(h*h) );

    for(int i=0; i<n; i++)
      result[i] = fvalue[i] - result[i];
    
    return result;
  }
  
};

#endif


