// #include "Restriction.h"
#include "MultigridPossion.h"
#include "MGLevelOp.h"
//#include "A.h"


std::vector<Real> MultigridPossion::Full( int n,
                                          std::vector<Real> &_fvalue,
                                            Restriction &rest,
                                            Interpolation & inter,
                                          int nu_1, int nu_2,int nu_0)
                         
{
  std::vector<Real> value ;
  
  if (n-1<4)
    {
      for(int i=0; i<3; i++)
        value.push_back(0);
      for (int i=0; i< nu_0; i++)
        value = this->Vcycle( n, _fvalue, rest, inter, nu_1, nu_2, value);
      return value;
    }
  else
    {
      std::vector<Real> _fvalueCoarse;
      _fvalueCoarse = rest.restriction(_fvalue);
      value =  this->Full( n/2,_fvalueCoarse,rest,inter,nu_1,nu_2);  
       }
  value = inter.interpolation(value);
  assert(value.size() == (n-1) );
  for (int i=0; i< nu_0; i++)
    value = this->Vcycle( n, _fvalue, rest, inter, nu_1, nu_2, value);
  
  return value; 
}

//template <> inline
std::vector<Real> MultigridPossion::Vcycle( int that,
                                            std::vector<Real> &_fvalue,
                                            Restriction &rest,
                                            Interpolation & inter,
                                            int nu_1, int nu_2,
                         std::vector<Real> &init) 
{
  // Real eps = this->eps;
  int ngrid = that;
  assert( init.size() == (ngrid-1) && init.size() == _fvalue.size());
  Real h = 1.0/ngrid;
  int n = ngrid-1;
  std::vector<Real> guess = init;
  std::vector<Real> residualValue = _fvalue;
  std::vector<Real> _value=guess;
  GuessSeidel relax;
  std::vector<Real> valueAfter;
  // op = relax;
  for(int k=0; k< nu_1; k++)
    {
      // std::vector<Real> guess = relax.Smooth(residualValue,guess);
    }
  assert(guess.size() == ngrid-1);
  // std::vector<Real> _value = this->Relax(n+1,residualValue,
  //                                        guess, nu_1, 2.0/3);

  std::vector<Real> valueCoarse;
  /*for next v-cycle on coarse grid
   */ 
  
    //n=3 and directly caculte the value
        if(n<4)
          {
             assert( n==3 );
             assert( residualValue.size() == 3 );
            // int n2=3;
            // double dl[n2-1];
            // for(int j=0 ;j<n2-1; j++)
            //   dl[j]=-(1.0)*h*h;
            // double d[n2];
            // for(int j=0 ;j<n2; j++)
            //   d[j]=(2.0)*h*h;
            // double b[n2];
            // for(int j=0 ;j<n2; j++)
            //   b[j]=_value[j];
            // //overwrite b
            // LAPACKE_dgtsv(LAPACK_COL_MAJOR, n2, 1,
            //               dl, d, dl,b,n2);
             std::vector<Real> result;
            // // for(int i=0; i<n2; i++)
            // //   result.push_back(b[i]);
            // for(int i=0; i<n2; i++)
            //   result.push_back(exp(sin(0.25*(i+1))));
            
            // ///for Test
            // std::cout << "The bottom value: "
            //           << result[0]<< exp(sin(0.25))
            //           << ", "
            //           <<result [1]<< exp(sin(0.5))
            //           << ", "
            //           <<result[2]<<exp(sin(0.75));
            BottomDirect bottom;
            result = bottom.BottomSolver(3,residualValue);
            return result;
          }
        else
          {
            n = that-1;
            double value[n];
            for(int j=0 ;j<n; j++) 
              value[j]= _value[j];

            double ULD[n*n];  
            for(int j=0 ; j< n-1 ; j++)
              {
                ULD[(n+1)*j]=2.0*h*h;
                //UL[(n+1)*j+1]=(-1.0);
                ULD[(n+1)*j+1]=-(1.0)*h*h;
                for(int k = 0; k< n-2; k++)
                  ULD[(n+1)*j+k+2]=(0);
                ULD[(n+1)*j+n]=-(1.0)*h*h;
              }
            ULD[n*n-1]=0;
        
            double y[n];
            for(int j=0 ;j<n; j++)
              y[j]=0; 
            cblas_dgemv(CblasColMajor, CblasNoTrans,
                        n, n, 1.0, ULD, n, value, 1, 0, y, 1 );
            std::vector<Real> resifine;
            for(int i=0; i<n; i++)
              resifine.push_back(_fvalue[i]-y[i]);
            ///end f^h-(A^h)(v^h) 
            std::vector<Real> resiCoarse = rest.restriction(resifine);
    
            int n_2=(n-1)/2;
            assert( n_2 == resiCoarse.size());
            std::vector<Real> initCoarse(n_2,0.0);
            valueCoarse = this->Vcycle( that/2 ,resiCoarse, rest,
                                        inter, nu_1, nu_2, initCoarse);
            //std::cout<<"count"<<std::endl;                            
          }
        assert(valueCoarse.size() == (n-1)/2);
          n=that -1;
    std::vector<Real> valueFine = inter.interpolation(valueCoarse);
    assert(valueFine.size() == n);
    assert(guess.size() ==n);
    for(int i =0; i<n ;i++ )
      guess[i] += valueFine[i];


    //  for(int k=0; k< nu_2; k++)
    // {
    //   std::vector<Real> guess = relax.Smooth(valueFine,guess);
    // }
    // valueAfter = this->Relax(ngrid, _value, nu_2, 2.0/3);
     // std::vector<Real> valueAfter = this->Relax(n+1,_fvalue,
     //                                     _value, nu_1, 2.0/3);
  return valueAfter;
  // return init;
}


//template<> inline
std::vector<Real> MultigridPossion::Relax(int _n, 
                                          std::vector<Real> &_fvalue,
                                          std::vector<Real> &initial,
                                          int nu_1, Real lamda ) 
{
  //_n=64
  int n= _n-1;
   Real h=1.0/_n;
  int _n2= (_n*_n);
  
  std::vector<Real>  function=_fvalue;
   assert((_n-1) == (function).size());
     assert((_n-1) == (initial).size());

  double value[n];
  for(int j=0 ;j<n; j++)
    value[j]= initial[j]; 
   assert((_n-1) == initial.size());
 
    for(int i=0 ; i<nu_1; i++)
    {
      double UL[n*n];  
      for(int j=0 ; j< n-1 ; j++)
        {
          UL[(n+1)*j]=0;
          UL[(n+1)*j+1]=-(1.0)/(h*h);
          for(int k = 0; k< n-2; k++)
            UL[(n+1)*j+k+2]=0.0;
          UL[(n+1)*j+n]=-(1.0)/(h*h);
          }
      UL[n*n-1]=0;

      double y[n];
      for(int j=0 ;j<n; j++)
        y[j]=function[j];
      // y[j]=0;
  
      cblas_dgemv(CblasColMajor, CblasNoTrans,
                  n, n, -0.5*(h*h), UL, n, value, 1, 0.5*h*h, y, 1 );

            // cblas_dgemv(CblasColMajor, CblasNoTrans,
            //       n, n, -0.0, UL, n, value, 1, 0.0*h2, y, 1 );
            for(int j=0 ; j<n ; j++)
              //  value[j] = value[j]*(1-lamda)+ lamda*temp[j];
               value[j] = value[j]*(1-lamda)+ lamda*y[j];
    }
    
    std::vector<Real> result;
  for(int j=0 ;j<n; j++)
     result.push_back(value[j]);
  return result;
}

      // std::vector<Real> temp;    
      // temp.push_back (value[1]*0.5-(0.5*h2)*y[0]);
      // for(int j=1; j<n-1 ; j++)
      //   temp.push_back(0.5*(value[j-1]+value[j+1]-(0.5*h2)*y[j]));
      // temp.push_back ( 0.5*value[n-2]-(0.5*h2)*y[n-2]);

    
